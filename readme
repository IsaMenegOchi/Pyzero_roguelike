# üõ°Ô∏è Hero Adventure Game

Um **jogo 2D de a√ß√£o** feito com Python e Pygame Zero, onde voc√™ controla um her√≥i que precisa derrotar inimigos dentro de um mapa, com anima√ß√µes de movimento, ataque e inimigos que patrulham √°reas.  

![Exemplo do jogo](screenshot.png)

---

## üéÆ Sobre o Jogo

- Controle um her√≥i com anima√ß√µes completas (andar, idle, atacar, morrer).
- Inimigos andam aleatoriamente em territ√≥rios espec√≠ficos.
- Ataque corpo a corpo.
- M√∫sica integrado.
- Tela de menu com bot√µes para iniciar, alternar m√∫sica e sair.
- Sistema de game over e rein√≠cio autom√°tico.

---

## üïπÔ∏è Controles

| Tecla | A√ß√£o                     |
|-------|--------------------------|
| **Setas** | Movimentar her√≥i      |
| **SPACE** | Atacar    |
| **Mouse** | Clicar nos bot√µes do menu |

---

## ‚ö° Como Rodar

1. Certifique-se de ter o [Python](https://www.python.org/downloads/) instalado.
2. Instale o Pygame Zero:
   ```bash
   pip install pgzero
3. Rode: pgzrun game.py


## üõ†Ô∏è Como Foi Feito

O jogo foi desenvolvido utilizando **Python** com a biblioteca **Pygame Zero**, que facilita a cria√ß√£o de jogos 2D com sprites animados e detec√ß√£o de colis√µes.

### Estrutura do Jogo

1. **Classes Principais**
   - `AnimatedActor`: Classe base para qualquer personagem animado. Gerencia anima√ß√µes de idle, caminhar, atacar e morrer.
   - `Hero`: Herda de `AnimatedActor`, adiciona controles do jogador, ataque e detec√ß√£o de colis√£o com inimigos.
   - `Enemy`: Herda de `AnimatedActor`, adiciona movimenta√ß√£o aleat√≥ria dentro de territ√≥rios espec√≠ficos e l√≥gica de spawn/reaparecimento.

2. **Sistema de Anima√ß√£o**
   - Cada personagem possui diferentes **frames para cada dire√ß√£o** (`up`, `down`, `left`, `right`) e cada estado (`idle`, `walk`, `attack`).
   - A anima√ß√£o √© controlada por um **timer**, alternando frames com base na velocidade definida para cada estado.

3. **Movimenta√ß√£o e Colis√£o**
   - O her√≥i se move usando as **setas do teclado** e o inimigo tem movimenta√ß√£o aleat√≥ria.
   - Colis√µes s√£o verificadas usando `Rect` do Pygame, permitindo detectar ataques do her√≥i ou contato com inimigos.

4. **Sistema de Ataque**
   - O her√≥i pode atacar com a tecla `SPACE`.
   - O ataque possui uma **√°rea de alcance maior** que o corpo do her√≥i, permitindo matar inimigos ao se aproximar.
   - Inimigos n√£o atacam √† dist√¢ncia por enquanto, mas voc√™ pode implementar proj√©teis usando a mesma l√≥gica.

5. **Menu e UI**
   - Tela de menu com **bot√µes interativos** (`Start Game`, `Toggle Music`, `Exit`) usando detec√ß√£o de clique do mouse.
   - Game over exibido centralizado na tela, com retorno autom√°tico ao menu ap√≥s alguns segundos.

6. **M√∫sica e Sons**
   - M√∫sica de fundo e efeitos sonoros foram adicionados com `music.play()` e `sounds.play()`.
   - Permite alternar m√∫sica no menu sem reiniciar a execu√ß√£o do jogo.

### Organiza√ß√£o de Assets

- **Sprites** organizados por personagem e a√ß√£o (`hero/idle/down`, `enemy/walk/left`, etc.).
- **Sons e m√∫sica** em pastas separadas, facilitando manuten√ß√£o e substitui√ß√£o de assets.

### Desenvolvimento

- Criado com foco em **simples e modular**, permitindo expandir para ataques √† dist√¢ncia, diferentes inimigos, n√≠veis e pontua√ß√£o.
- Utiliza **conceitos b√°sicos de jogos 2D**: anima√ß√£o por frames, movimenta√ß√£o com vetores, detec√ß√£o de colis√£o e timers para a√ß√µes.

---

> Esse projeto serve como base para expandir e criar jogos mais complexos em Python com anima√ß√µes e l√≥gica de combate.
